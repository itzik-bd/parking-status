name: 'Release'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

env:
  TF_VAR_app_name: ${{ vars.TF_VAR_app_name }}
  TF_VAR_environment_name: ${{ vars.TF_VAR_environment_name }}
  TF_VAR_camera_address: ${{ secrets.TF_VAR_camera_address }}
  TF_VAR_credentials_user: ${{ secrets.TF_VAR_credentials_user }}
  TF_VAR_credentials_pass: ${{ secrets.TF_VAR_credentials_pass }}

jobs:

  build-capture-analyzer-image:
    name: Build capture-analyzer image
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: ./lambda/capture-analyzer

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Download tensorflow model
        run: aws s3 cp s3://parking-status-models/model.tflite .

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: "parking-status-${{ vars.TF_VAR_environment_name }}-capture-analyzer"
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  terraform:
    name: Terraform
    needs: build-capture-analyzer-image
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install dependencies
      run: npm ci
      working-directory: ./web-app

    - name: Build web-app
      run: npm run build
      working-directory: ./web-app

    # Configure AWS Credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./infrastructure

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      working-directory: ./infrastructure

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      working-directory: ./infrastructure

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
      working-directory: ./infrastructure
