name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:

  build-capture-analyzer-image:
    name: Build capture-analyzer image
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: ./lambda/capture-analyzer
    outputs:
        image_url: ${{ steps.compose-image-url.outputs.url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Download tensorflow model
        run: aws s3 cp s3://parking-status-ml/models/model.tflite .

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - id: compose-image-url
        run: echo "url=${{ steps.login-ecr.outputs.registry }}/parking-status-capture-analyzer:${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Build and tag image
        run: docker build -t ${{ steps.compose-image-url.outputs.url }} .

      - name: Push image to Amazon ECR
        run: docker push ${{ steps.compose-image-url.outputs.url }}

  terraform:
    name: Terraform
    needs:
      - build-capture-analyzer-image
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure/app

    env:
      TF_VAR_environment_name: ${{ vars.TF_VAR_environment_name }}
      TF_VAR_camera_address: ${{ secrets.TF_VAR_camera_address }}
      TF_VAR_credentials_user: ${{ secrets.TF_VAR_credentials_user }}
      TF_VAR_credentials_pass: ${{ secrets.TF_VAR_credentials_pass }}
      TF_VAR_capture_analyzer_image_url: ${{ needs.build-capture-analyzer-image.outputs.image_url }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install dependencies
      run: npm ci
      working-directory: ./web-app

    - name: Build web-app
      run: npm run build
      working-directory: ./web-app

    # Configure AWS Credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

    # Apply changes to infrastructure
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false