name: 'CI/CD'

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:

  changes:
    runs-on: ubuntu-latest
    outputs:
      capture-analyzer: ${{ steps.changes.outputs.capture-analyzer }}
      web-app: ${{ steps.changes.outputs.web-app }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            capture-analyzer:
              - 'lambda/capture-analyzer/**'
            web-app:
              - 'web-app/**' 

  build-capture-analyzer-image:
    name: Build capture-analyzer image
    needs: changes
    if: ${{ needs.changes.outputs.capture-analyzer == 'true' }}
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: ./lambda/capture-analyzer

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Download tensorflow model
        run: aws s3 cp s3://parking-status-ml/models/model.tflite .

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and tag image
        run: docker build -t ${{ steps.login-ecr.outputs.registry }}/parking-status-capture-analyzer:${{ github.run_number }} .

      - name: Push image to Amazon ECR
        run: docker push ${{ steps.login-ecr.outputs.registry }}/parking-status-capture-analyzer:${{ github.run_number }}

  terraform:
    name: Terraform
    needs: build-capture-analyzer-image
    if: |
      always() &&
      (needs.build-capture-analyzer-image.result == 'success' || needs.build-capture-analyzer-image.result == 'skipped')
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure/app
    outputs:
      distribution-id: ${{ steps.tf-outputs.outputs.distribution-id }}

    env:
      TF_VAR_environment_name: ${{ vars.TF_VAR_environment_name }}
      TF_VAR_camera_address: ${{ secrets.TF_VAR_camera_address }}
      TF_VAR_credentials_user: ${{ secrets.TF_VAR_credentials_user }}
      TF_VAR_credentials_pass: ${{ secrets.TF_VAR_credentials_pass }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Configure AWS Credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set image URL variable
      run: |
        last_image_tag=$(aws ecr describe-images --region ${{ vars.AWS_REGION }} --repository-name parking-status-capture-analyzer --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text)
        echo "TF_VAR_capture_analyzer_image_url=${{ steps.login-ecr.outputs.registry }}/parking-status-capture-analyzer:${last_image_tag}" >> $GITHUB_ENV

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

    # Apply changes to infrastructure
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false

    - name: Get outputs
      id: tf-outputs
      run: echo "distribution-id=$(terraform-bin output -raw distribution-id)" >> "$GITHUB_OUTPUT"

  web-app:
    name: Deploy web-app
    needs:
      - changes
      - terraform
    if: ${{ needs.changes.outputs.capture-analyzer == 'true' }}
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        shell: bash
        working-directory: ./web-app

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm ci

      - name: Build web-app
        run: npm run build

      # Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Upload to S3
        run: aws s3 sync ../target/web-app s3://parking-status--${{ vars.TF_VAR_environment_name }}--web-app --delete

      - name: Invalidate CloudFront
        uses: chetan/invalidate-cloudfront-action@v2
        env:
          DISTRIBUTION: ${{ needs.terraform.outputs.distribution-id }}
          PATHS: "/index.html"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}
